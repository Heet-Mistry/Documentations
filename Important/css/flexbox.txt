flexbox is the layout mechanism for laying out groups of item 
in one direction. It is the ideal layout pattern for the sidebar like 
designs. 

> Items can be displayed in row or column 
> They respect the writing mode of the document 
> They are single line by default, but can be asked to wrap onto multiple 
  lines
> Items in layout can be visually ordered, away from the order in the DOM 
> Items can be aligned on the cross axis.


# flex-direction: row | column
main axis = along the flex direction 
cross axis = along the verticle to the main axis 

we can do two things on the cross axis, we can move the items individually 
or as a group so they align against each other, if we have the wrap lines 
then we can treat those individual lines as one group.

for using the flex layout we have to make the flex container and then 
set the display property of the flex container to flex.
# display :flex

as we set the display property to the flex, it will give a block level
flex ( will take up the whole width will not allow other to sit there) 
coontainer, and the children will be flex items. All the flex items will 
initially behave with their initial values.

All css properties have initial values, which control how they behave out 
of the box, when we do not apply any external value the initial value is taken.

flex initial values
- display as row 
- do not wrap 
- do not grow to fill the container 
- they line up at the start of the container.


1. flex-direction 
- row 
- row-reverse 
- column 
- column-reverse 
with this we can change the display direction of the flex items.

we should be cautious with the reordering of the elements, because this 
direction property just change the display order of the items. 

every axis has the start and the end.
main start-> main end 
cross start -> cross end

Initial value of the flex-wrap property is nowrap. Which means if there is 
not enough space in the container then the content will overflow. When we 
shrink the size the items will shrink down as much as the possible 
min-content before the overfllow happens. 

for making them wrap we have to make use of the flex-wrap:wrap.

when a flex container wraps it creates multiple flex lines, in terms of space 
distribution, each line here acts like new flex container. Therefore if 
we are wrapping the rows, it is not possible to get something in row 2 to 
line up with something above it in row 1. (use grid for this)

> shorthand for flex-flow
flex-flow:column wrap;// shorhand notation for the direction and wrapping


# Controlling space inside the flex items 
By default the items do not grow if our container have more space, they 
stop growing at their max-content size. this is due to the initial value of
the flex properties. 

flex is the property of the flex items.

flex-grow:0 == item do not grow 
flex-shrink:1 == items can shrink smaller than their flex-basis
flex-basis:auto == items have base size auto
this is flex:initial


for causing the items to grow and making the large items to have larger 
size than the small items we have to make use of the flex:auto. 

flex:auto 
flex-grow:1 == items can grow larger than their flex basis 
flex-shrink:1 == items can shrink smaller than their basis
> using flex:auto will mean that items will end up different sizes 
  as the space shared between them will be shared out each item will 
  laid to their max-content. So a large item will gain more space .

To force all the items to be of the consistent size and ignore the size 
of the content change we have to make the flex:1. 

which sets 
flex-grow:1
flex-shrink:1
flex-basis:0

using flex:1 says that all the items have zero size, therefore all of the 
space in the flex container is available to be distributed, all have the 
flex-grow factor to 1 so they all will grow equally and space is shared 
equally. 

flex:none == rarely used category where, each item will not shrink or grow 
they will stay as it is, this is helpful when we only want the alignment 
properties of the flex. 


we can also make the flex items to grow at the different rate, we can 
make the flex:1, flex:2 and flex:3 which this factors are for the grow 
we can also make the factors for the shrink and the basis, but less 
usefull usecase.


we can also reorder the flex items on the basis of the order property
we can give the orders. the items by default have the smallest order 
value and we have to give the order to all of them.  default value of the 
order is zero. we can also give the negative order. 


## flexbox alignment overview
properties for the space distribution 
1. justify-content = space distribution on main axis 
2. align-content = space ditribution on cross axis 
3. place-content = shorthand for setting both the properties 

properties for the alignment in flexbox 
1. align-self = align single item on cross axis 
2. align-items = aligns all of the item as the group on cross axis

justify works on the main axis while the align works on the cross axis.

justify content is for spacing around the main axis flex items, while when 
we have the wrap flex lines then we might also need to allocate the space
around the cross axis, so when we have ultiple flex lines we have 
to make use of the align -content same as the justify for the space 
distribution flex-start, flex-end, space-around etc. 


align-items and align-self is used for aligning the items on the cross axis 
inside a single flex line. the space avaiable for the this alignment will 
depend on the height of the flex container or the flex line in the case 
of the wrapped set of items.

initial value of align-self is stretch, which is why the flex-items in a 
row stretch to the height of the tallest item by default. we can change this 
by setting the align-self property. So basically the align item property 
is used for setting the all of the flex item's align-self properties at 
a time. 


default value of the align properties is stretch so the flex items look
stretched in the display. 