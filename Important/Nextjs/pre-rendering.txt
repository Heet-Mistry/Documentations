> Pre-rendering and data fetching

- comparing the traditional react-app page source of the index.html we can 
  see that it will just contain the <div> with the root id while in the next.js 
  application we can see that in the page source everything is rendered 
  at the server side. we can see each and every tags that are shown in the viewport

what is pre-render?
pre-render means Next.js generates html for each page in advance instead of 
having it all done by the client side javascript. 

Hydration = React components are initialized and mounted onto the root div 
            and app becomes interactive. Hydration occurs in the react app. 


Traditional react cycle 
Initial load (Just div tag with root) ==> Hydration and app becomes interactive 
                                          (client side)

Next cycle 
Initial load (Non interactive HTML) ==> Hydration and it becomes interactive
                                        if there will be any link component they 
                                        will be active after the Hydration


why pre-render?
- pre-rendering improves the performance 
        - react app we have to wait for the javascript to be executed 
        - fetch the data and then render the UI
        - wait time for the user 
        - with pre-rendered page the HTML is generated and we can see it 
          at the initial load also 

- pre-rendering helps with SEO 
        - browsers can index it when the html content is pre generated


There are two forms of pre-rendering 
1. Static site generation 
2. server side rendering 


# Static Site Generation (SSG)
A method of pre-rendering, where the HTML pages are generated at the buil time.

The HTML with all the data that makes up the content of the web page are generated 
in advance when you build your application. Is is the recommended method 
to pre-render the pages whenever possible, as the page can be built once 
cached by the CDN and server to the client instantly. 
e.g. Blog posts, e-commerce Product pages etc. 

By default the next.js will pre-render the page which means for each page it will 
be automatically be statically generated when we build our application. 

Production server = An optimized build is created once and we deploy that build 
Development server = We should be able to make changes to our code 

What next.js does is, in the production mode the page will be generated at the 
build time and in the development mode the new page will be generated on each 
request. 


# SSG can be done with and without data 

1. SSG without data = which means that the page that is being pre-rendered 
                      does not have to fetch any external data, so it can 
                      be directly be pre-rendered.


2. SSG With data = for the data fetching in SSG, we can also default export the 
                   async function for data fetching named getStaticProps(), it will 
                   run at the build time in production and inside it we can fetch 
                   external data and we can pass it to the props in the page.

export async function getStaticProps() {
    const response = await fetch("https://jsonplaceholder.typicode.com/users")
    const data = await response.json()
    return {
        props: {
            users:data
        }
    }
}

- it runs only on the server side 
- it runs on every request 
- we can write server side code directly in getStaticProps because it is 
  100% server side it will not be sent to the client side bundle
- querying the database etc can be done in the function 
- we can also include api keys in the function 
- allowed only in the page 
- getStaticProps runs at build time however in development mode it runs 
  on every request

The server and the static in the .next folder is the main folders for the 
production. In the server folder there will be the files which are used for the 
SSG and static generation, and in the static folder there will be the files for the 
hydration of the components. 


Any link component in the viewport will be prefetched by default for pages 
using static site generation. 

Static site generation is good for when the data is not changing that much,
when the data is changing too much we have to make use of the other methods 
in the getSttaicProps the data will be fetched and the json file will be created 
when we directly navigate to the route of the statically generated page through 
the direct url it will be serverd from the static generated page, while when we 
navigate too that route from a different route the page is created client side 
using the javascript and the JSON prefetched from the server. 

getSttaicProps runs only at the build time =  so when the data changes we have 
to re build the site.

22-30 remaining concept getStaticProps



# Server side rendering (SSR)
> problems with SSG 
  - we can not fetch the data at the request time so the data can be stale 
    e.g. news website we can not have the stale data, getStaticProps will fetch 
    the data at the build time which is not suitable

  - we do not have the access to the incoming request, wich means 
    let say we are building the website like twitter then we have 
    to list the tweets based on the userId and his/her preferences 
    so we have to pass the userId for fetching the data which can
    not be done in SSG

In the server side rendering the pre-rendering happens at the the 
request time not the build time. So the HTML is generated for every 
request. SSR is good when we need to fetch the data at the request 
time and also when we fetch the data personalized to the user keeping 
SEO in the mind. 

for SSR we have to export the getServerSideProps function from the 
page 

getServerSideProps
- runs only on the server side 
- code we write inside the function will not be included in the JS 
  bundle that is sent to the browser
- we can write the server side code directly inside the getServerSideProps
  fs module, database connection and all
- allowed only in the pages not in components


This form of the pre-rendering is slower than the SSG as the server 
has to compute the result on each request. 

we can also make use of the getServerSideProps() with the dynamic 
parameters which means we can fetch the specific data based on the 
params passed in the getServerSideProps()

for that the getServerSideProps(context) will recieve the context 
argument it will be the object which contains the key as params. 

// this is like when we visit the route 
// root/news/category

so the pages structure will be like 
pages 
  - news 
    - index 
    - [category] // this file name will be sent to the params in 
                    context

// getServerSideProps with dynamic parameters
export async function getServerSideProps(context){
  const {params} = context
  const {category} = params
  const response = await fetch(url)
  const data = await response.json()
  return {
    props:{
      articles:data,
      category
    }
  }
}

context object properties = documentation 
setting the cookies in browser = 34th video
