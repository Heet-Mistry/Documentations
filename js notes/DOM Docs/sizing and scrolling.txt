Some browser take the space of the scroll bar from the content width and the 
content width decreases. 

1. offsetParent, offsetLeft/offsetTop 
The offsetParent is the nearest ancestor that the browser uses for calculating 
coordinates during rendering. 

That’s the nearest ancestor that is one of the following:
CSS-positioned (position is absolute, relative, fixed or sticky), or
<td>, <th>, or <table>, or
<body>.

The offsetLeft/offsetTop provide the x/y coordinates relative to offsetParent
upper left corner. 


<main style="position: relative" id="main">
  <article>
    <div id="example" style="position: absolute; left: 180px; top: 180px">...</div>
  </article>
</main>
<script>
  alert(example.offsetParent.id); // main
  alert(example.offsetLeft); // 180 (note: a number, not a string "180px")
  alert(example.offsetTop); // 180
</script>
--- Here the div is relative to the main so the offsetParent will be the main element.



There are several occasions when offsetParent is null:
For not shown elements (display:none or not in the document).
For <body> and <html>.
For elements with position:fixed.


2. offsetWidth/ height 
offsetWidth these provides the outer width/height of the element. It is the 
full size including the borders. 

NOTE:
Geometry properties are zero/null for elements that are not displayed

Geometry properties are calculated only for displayed elements.
If an element (or any of its ancestors) has display:none or is not in the document, 
then all geometry properties are zero (or null for offsetParent).
For example, offsetParent is null, and offsetWidth, offsetHeight are 0 when we 
created an element, but haven’t inserted it into the document yet, or it (or its ancestor) has display:none.
We can use this to check if an element is hidden, like this:


3. clientTop/clientLeft
In the geometry we may have the boxes and it has the borders. clientLeft gives 
the left border width. clientTop it is the border top height. 

But to be precise – these properties are not border width/height, but rather 
relative coordinates of the inner side from the outer side.


What’s the difference?
It becomes visible when the document is right-to-left (the operating system is in 
Arabic or Hebrew languages). The scrollbar is then not on the right, but on the left, 
and then clientLeft also includes the scrollbar width.


4. clientWidth /clientHeight 
These properties provide the size of the area inside the element borders. 
They include the content width together with paddings, but without the scrollbar:

So when there’s no padding we can use clientWidth/clientHeight to get the content 
area size. the scroll size is excluded in this case. 


5. scrollWidth and height 
scrollHeight – is the full inner height of the content area including the 
scrolled out parts.

scrollWidth – is the full inner width, here we have no horizontal scroll, 
so it equals clientWidth.

here also the width of the scrollbar is excluded from the calculation. 


6. scrollLeft/ scrollTop 
Properties scrollLeft/scrollTop are the width/height of the hidden, 
scrolled out part of the element.

In other words, scrollTop is “how much is scrolled up”.
Most of the geometry properties here are read-only, but scrollLeft/scrollTop 
can be changed, and the browser will scroll the element.
If you click the element below, the code elem.scrollTop += 10 executes. 
That makes the element content scroll 10px down.


Instead of using the CSS height and width from the getComputedStyle rather use the 
geometric ones. coz... 

First, CSS width/height depend on another property: box-sizing that defines 
“what is” CSS width and height. A change in box-sizing for CSS purposes may break 
such JavaScript.

Second, CSS width/height may be auto, for instance for an inline element:


NOTE:
CSS width is the inner content area without the paddings.


*** window sizes and scrolling ***

1. Width and Height of the window 
To get the window width and the height, we can make use of the clientWidth and clientHeight 
of document.documentElement(HTML Element).

window.innerwidth = it will give the whole width
document.documentElement.clientWidth = this gives the width without the scrollbar 

For getting the full document width we will make use of the
To reliably obtain the full document height, we should take the maximum of 
these properties:

let scrollHeight = Math.max(
  document.body.scrollHeight, document.documentElement.scrollHeight,
  document.body.offsetHeight, document.documentElement.offsetHeight,
  document.body.clientHeight, document.documentElement.clientHeight
);

alert('Full document height, with scrolled out part: ' + scrollHeight);
// no smart logic just the historical reasons


alert('Current scroll from the top: ' + window.pageYOffset);
alert('Current scroll from the left: ' + window.pageXOffset);

Both are the same but they both exist for the reasons
window.pageXOffset is an alias of window.scrollX.
window.pageYOffset is an alias of window.scrollY.

Regular elements can be scrolled by changing scrollTop/scrollLeft.
There is an universal method for scrolling the elements such as 

scrollBy(x,y) scrolls the page relative to the current coorinates and position 
scrollTo(pageX,pageY) scrolls the age to the absolute position. 

To scroll to the very beginning, we can use scrollTo(0,0).


scrollIntoView(top) = here when applied on certain element, what it does is that 
if the top is true, then the element will be visible at the top in the page .

The call to elem.scrollIntoView(top) scrolls the page to make elem visible. It has one argument:
If top=true (that’s the default), then the page will be scrolled to make elem appear 
on the top of the window. The upper edge of the element will be aligned with the window 
top.

If top=false, then the page scrolls to make elem appear at the bottom. 
The bottom edge of the element will be aligned with the window bottom.


To make the document unscrollable, it’s enough to set 
document.body.style.overflow = "hidden". The page will “freeze” at its current scroll 
position.


** coordinates **
Most JavaScript methods deal with one of two coordinate systems:

Relative to the window – similar to position:fixed, calculated from the window top/left 
edge. we’ll denote these coordinates as clientX/clientY, the reasoning for such name 
will become clear later, when we study event properties.

Relative to the document – similar to position:absolute in the document root, calculated 
from the document top/left edge.we’ll denote them pageX/pageY.


When the page is scrolled to the very beginning, so that the top/left corner of the 
window is exactly the document top/left corner, these coordinates equal each other. 
But after the document shifts, window-relative coordinates of elements change, as 
elements move across the window, while document-relative coordinates remain the same.

client x and clientY are the properties which have the current position of the 
element from the relative to the window. while the pageX and pageY is relative to the 
whole document even if it is scrolled. 

elem.getBoundingClientRect() returns the window coordinates for a minimal rectangle 
that encloses the elem as an object of built in DOMRect class. 

x/y – X/Y-coordinates of the rectangle origin relative to window,
width/height – width/height of the rectangle (can be negative).

top/bottom – Y-coordinate for the top/bottom rectangle edge,
left/right – X-coordinate for the left/right rectangle edge.

As you can see, x/y and width/height fully describe the rectangle. Derived properties 
can be easily calculated from them:

left = x
top = y
right = x + width
bottom = y + height


The call to document.elementFromPoint(x, y) returns the most nested element at 
window coordinates (x, y).

let centerX = document.documentElement.clientWidth / 2;
let centerY = document.documentElement.clientHeight / 2;
let elem = document.elementFromPoint(centerX, centerY);
elem.style.background = "red";
alert(elem.tagName);

for the out of the window coordinates the elem will be null. 

position fixed is the window related coordinates so, if the window is scrolled then 
the element will stay there only. here we have to make use of the document related coords 
they start from the upper left corner of the document not the window. 

In css the window related coordinates cooresponds to the position fixed while the 
document related coordinates follows the position absolute. 


Any point on the page has coordinates:
Relative to the window – elem.getBoundingClientRect().
Relative to the document – elem.getBoundingClientRect() plus the current page scroll.
