*** Browser and environment specs ***

Host environment = the device or the platform where the javascript is running

There are three parts of the window object when the javascript runs in the 
browser. Window is the root or the global object. 


DOM = Document object model
BOM = Browser object model (navigator,screen,location,frames,hitory,alert,confirm,prompt)
Javascript 


DOM = it is basically represent all the page contents as objects that can be modified.
document object is the main entry point to the webpage. 

There is also a CSSOM = css object model for the styling, it is used when 
we change the styling of the page, with the help of the javascript. 

BOM = it represent the specific additional objects provided by the browser for 
working with the everything except the DOM .

navigator.userAgent = for finding which browser is running 
navigator.platform = for finding which platform is the host, linux, mac

we cand redirect the page with the help of the location.href = some another site

*** DOM ***
DOM is the backbone of the HTML document. Every node is an object, tags are the
element nodes. text forms the text nodes. text node contains only string. 

- Spaces and newlines before <head> are ignored for historical reasons.
- If we put something after </body>, then that is automatically moved inside 
the body, at the end, as the HTML spec requires that all content must be inside 
<body>. So there can’t be any spaces after </body>.

if the browser finds encounters malformed HTML,then it automatically corrects 
while making the DOM 

Everything in HTML, even comments, becomes a part of the DOM.
!DOCTYPE is also included in the DOM tree. 

there are total 12 dom nodes, even the comments also converted into the dom nodes. 

document = gives the whole document 
document.documentElement = gives the HTML tag

In the DOM when we access the node which does not exist then it will give null.

document.[node].childNodes gives the immediate children nodes.
firstChild and the lastChild for the fast access to first and the last children.

childNodes is not the array, but the collection of the objects, which is not 
the iterable, but it is an array like object ,we can make use of the for of loop 
for the traversal. 

DOM Collections are readonly.

NOTE 
Do not ever use for in for looping over the DOM Collections. 

we can fetch the nextSibiling and the previousSibiling with the same attr.here this 
attrs will give all the nodes, even if they are the text or te comment and all.

but when we want only the element node then we have to make use of 

children - only those who are nodes elements 
fiestElementchild, lastElementChild 
previousElementSibiling, nextElementSibiling
parentElement


parentElement = returns the element parent 
parentNode = it returns the node parent

there is one exception here
alert( document.documentElement.parentNode ); // document
alert( document.documentElement.parentElement ); // null


table element supports some its own methods
table.rows 
table.caption 
table.tBodies 

document.querySelector
document.querySelectorAll
element.matches("some css") = it returns true or false
element.closest("some css") = it finds the closest ancestor which matches the 
curent specified css

getElementsByClassName
getElementsByTagName 


getElementsBy return a live collection, where when the tags updated it will 
also be updated

querySelectorAll = returns a static collection, it will not automatically updated.


** Node properties types and contents **
There is a heirarchical relationship between the DOM nodes, like the parent and 
the child. 

Eventtarget = it is the root of the node heirarchy

node = it is the child class of the event target and it is also the abstract class
it gives the functionalities such as parentnode, nextSibiling and all

document = it is the abstract class, which is inherited by the HTMLDocument the 
document as the whole

characterData  = child of the node class, which will be inherited by the text and 
the comment nodes

element = base class for the dom element, child of the node class 
children,nextElementSibiling and all are the functionalities


Finally, HTMLElement is the basic class for all HTML elements. 
We’ll work with it most of the time.

It is inherited by concrete HTML elements:

HTMLInputElement – the class for <input> elements,
HTMLBodyElement – the class for <body> elements,
HTMLAnchorElement – the class for <a> elements,
…and so on.


alert( document.body instanceof HTMLBodyElement ); // true
alert( document.body instanceof HTMLElement ); // true
alert( document.body instanceof Element ); // true
alert( document.body instanceof Node ); // true
alert( document.body instanceof EventTarget ); // true

> nodeType property 
The nodeType property provides one more, “old-fashioned” way to get the 
“type” of a DOM node.

elem.nodeType == 1 for element nodes,
elem.nodeType == 3 for text nodes,
elem.nodeType == 9 for the document object,

NOTE:
It is only read only we can not change it. 

>nodeName and tagName 
alert( document.body.nodeName ); // BODY
alert( document.body.tagName ); // BODY

the tagName property is only for the element nodes and the nodeName is for any nodes.

<body><!-- comment -->

  <script>
    // for comment
    alert( document.body.firstChild.tagName ); // undefined (not an element)
    alert( document.body.firstChild.nodeName ); // #comment

    // for document
    alert( document.tagName ); // undefined (not an element)
    alert( document.nodeName ); // #document
  </script>
</body>


we can add the html with the help of the innerHTML in the document.
if we add the script with the help of the innerHTML then it will not execute. 

NOTE:
We should not make use of the elem.innerHTML+="some other thing", what this will do 
is it will remove the content from the tag and then rewrite the whole content, so 
if there are any images or other resources then they will load again. 

outerHTML = full HTML of the element 
innerhtml + the tag itself is the = outerHTML 

What outerHTML does is that, it removes the tag from the document and replaces with 
it with the new HTML tag. so the outerHTML does not change the element variable 
we are working with, it changes the DOM. 

let div = document.querySelector('div');
  // replace div.outerHTML with <p>...</p>
  div.outerHTML = '<p>A new element</p>'; // (*)
  // Wow! 'div' is still the same!
  alert(div.outerHTML); // <div>Hello, world!</div> (**)


for reading from the text node we can not make use of the innerHTML property 
we have to make use of the data property.
textNode.data in the case of the comments the data property gives just the 
comment content. 

textContent property provides the access to the textcontent inside the given html 
node element, minus all the other elements. 

<div id="news">
  <h1>Headline!</h1>
  <p>Martians attack people!</p>
</div>

<script>
  // Headline! Martians attack people!
  alert(news.textContent);
</script>

the textContent puts the string as it is in the tag. while the innerHTML converts 
it into the tags. 

there is a hidden property in the html tags, which hides the element from the 
dom, under the hood it is the display:none. we can set it by doing like 
elem.hidden = true/false;


** DOM Attributes **
DOM nodes are regular javascript objects, we can add our own custom properties to 
it easily. 

document.body.myData = {
  name: 'Caesar',
  title: 'Imperator'
};
alert(document.body.myData.title); // Imperator

when the browser parses the DOM content, then what it will do is for the standard 
properties it will create them into the objects itself directly as the property, 
but for the non standard ones it will not create them.

Sure. All attributes are accessible by using the following methods:
elem.hasAttribute(name) – checks for existence.
elem.getAttribute(name) – gets the value.
elem.setAttribute(name, value) – sets the value.
elem.removeAttribute(name) – removes the attribute.

also we can read all the attributes by doing like 
elem.attributes = a collection of the objects


HTML attributes have the following features:
Their name is case-insensitive (id is same as ID).
Their values are always strings.

<body>
  <div id="elem" about="Elephant"></div>
  <script>
    alert( elem.getAttribute('About') ); // (1) 'Elephant', reading
    elem.setAttribute('Test', 123); // (2), writing
    alert( elem.outerHTML ); // (3), see if the attribute is in HTML (yes)
    for (let attr of elem.attributes) { // (4) list all
      alert( `${attr.name} = ${attr.value}` );
    }
  </script>
</body>

the elem.attributes is iterable we can make use of the for of in it. 

In most of the cases the attributes will be in the sync when we set the attr with the 
setattr or directly as the property, but it is helpful to set it using the 
setAttribute, because in the exception case the value attr of the input element 
will not be in the sync with the element property setting. 

let input = document.querySelector('input');
  // attribute => property
  input.setAttribute('value', 'text');
  alert(input.value); // text
  // NOT property => attribute
  input.value = 'newValue';
  alert(input.getAttribute('value')); // text (not updated!)


DOM Properties are in the most of the cases typed. means it can be string or boolean 
in some cases and objects in case of the styles. 

<input id="input" type="checkbox" checked> checkbox
<script>
  alert(input.getAttribute('checked')); // the attribute value is: empty string
  alert(input.checked); // the property value is: true
</script>


<div id="div" style="color:red;font-size:120%">Hello</div>
<script>
  // string
  alert(div.getAttribute('style')); // color:red;font-size:120%

  // object
  alert(div.style); // [object CSSStyleDeclaration]
  alert(div.style.color); // red
</script>

Quite rarely, even if a DOM property type is a string, it may differ from 
the attribute. For instance, the href DOM property is always a full URL, even 
if the attribute contains a relative URL or just a #hash.

<a id="a" href="#hello">link</a>
<script>
  // attribute
  alert(a.getAttribute('href')); // #hello
  // property
  alert(a.href ); // full URL in the form http://site.com/page#hello
</script>


Sometimes we have to create the non standard attributes, dataset for passing the 
data into the HTML element. 

<!-- mark the div to show "name" here -->
<div show-info="name"></div>
<!-- and age here -->
<div show-info="age"></div>
<script>
  // the code finds an element with the mark and shows what's requested
  let user = {
    name: "Pete",
    age: 25
  };
  for(let div of document.querySelectorAll('[show-info]')) {
    // insert the corresponding info into the field
    let field = div.getAttribute('show-info');
    div.innerHTML = user[field]; // first Pete into "name", then 25 into "age"
  }
</script>

they can be used for the custom styling. 
<style>
  /* styles rely on the custom attribute "order-state" */
  .order[order-state="new"] {
    color: green;
  }

  .order[order-state="pending"] {
    color: blue;
  }

  .order[order-state="canceled"] {
    color: red;
  }
</style>

<div class="order" order-state="new">
  A new order.
</div>

<div class="order" order-state="pending">
  A pending order.
</div>

<div class="order" order-state="canceled">
  A canceled order.
</div>


There can be conflict in the attrs because, if the specification changes and what 
if the html element introduces the same attr, then here we have to make use of the 
data- attributes. they are only for the programer uses. and these attrs are in the 
dataset property. 

<body data-about="Elephants">
<script>
  alert(document.body.dataset.about); // Elephants
</script>


NOTE:::::
Multiword attributes like data-order-state become camel-cased: dataset.orderState.


** Modifying the document **

1. creating an element 
document.createElement(tag)
let div = document.createElement('div');

2. document.createTextNode(some text)
creates the text node
let textNode = document.createTextNode('Here I am');


Insertion methods ==>
node.append(...nodes or strings) – append nodes or strings at the end of node,
node.prepend(...nodes or strings) – insert nodes or strings at the beginning of node,
node.before(...nodes or strings) –- insert nodes or strings before node,
node.after(...nodes or strings) –- insert nodes or strings after node,
node.replaceWith(...nodes or strings) –- replaces node with the given nodes or strings.


This method can include multiple nodes and strings in one single call.
<div id="div"></div>
<script>
  div.before('<p>Hello</p>', document.createElement('hr'));
</script>


Here when we insert the text hTML then it will look like this. 
&lt;p&gt;Hello&lt;/p&gt;
<hr>
<div id="div"></div>


insertAdjacentHTML/Text/Element 
here we can add the string as the HTMl. 

// code snippet
elem.insertAdjacentHTML(where, html).

"beforebegin" – insert html immediately before elem,
"afterbegin" – insert html into elem, at the beginning,
"beforeend" – insert html into elem, at the end,
"afterend" – insert html immediately after elem.

<div id="div"></div>
<script>
  div.insertAdjacentHTML('beforebegin', '<p>Hello</p>');
  div.insertAdjacentHTML('afterend', '<p>Bye</p>');
</script>

This is the outcome
<p>Hello</p>
<div id="div"></div>
<p>Bye</p>


elem.insertAdjacentText(where, text) – the same syntax, but a string of text is 
inserted “as text” instead of HTML,

elem.insertAdjacentElement(where, elem) – the same syntax, but inserts an element.



** Node removal **
for removing the node there is the method node.remove()

NOTE:
All insertion methods automatically remove the node from the old place. So when we 
append or we change the node position the older one is removed. 

<div id="first">First</div>
<div id="second">Second</div>
<script>
  // no need to call remove
  second.after(first); // take #second and after it insert #first
</script>



** cloning nodes : cloneNode **
The call elem.cloneNode(true) creates a “deep” clone of the element – 
with all attributes and subelements. If we call elem.cloneNode(false), 
then the clone is made without child elements.


DocumentFragment 
DocumentFragment is a special DOM node that serves as a wrapper to pass around 
lists of nodes.We can append other nodes to it, but when we insert it somewhere, 
then its content is inserted instead. For example, getListContent below generates 
a fragment with <li> items, that are later inserted into <ul>.

<ul id="ul"></ul>
<script>
function getListContent() {
  let fragment = new DocumentFragment();

  for(let i=1; i<=3; i++) {
    let li = document.createElement('li');
    li.append(i);
    fragment.append(li);
  }

  return fragment;
}

ul.append(getListContent()); // (*)
</script>

Rather we can make use of this in case of the fragment
<ul id="ul"></ul>
<script>
function getListContent() {
  let result = [];

  for(let i=1; i<=3; i++) {
    let li = document.createElement('li');
    li.append(i);
    result.push(li);
  }

  return result;
}

ul.append(...getListContent()); // append + "..." operator = friends!
</script>


parentElem.appendChild(node) = appends the node as the last child of the 
parentElem 

parentElem.insertBefore(node, nextSibling)
Inserts node before nextSibling into parentElem.

parentElem.replaceChild(node, oldChild)
parentElem.removeChild(node)

there is one old script which document.write(some text or some html in form of string)
it is rarely used, but the main drawback here is that this only works when the 
page is loading, if after the load we run this then the page content will be erased. 



