*** Destructuring ***
Destructuring helps us to unpack the array or the object into needed values 

// Array destructuring
let arr = ["John", "Smith"]

// destructuring assignment
// sets firstName = arr[0]
// and surname = arr[1]
let [firstName, surname] = arr;

alert(firstName); // John
alert(surname);  // Smith

let [firstName, surname] = "John Smith".split(' ');
alert(firstName); // John
alert(surname);  // Smith

for ignoring the elements we have to make use of the comma separator.
let [a,,b] = arr;


let user = {};
[user.name, user.surname] = "John Smith".split(' ');

alert(user.name); // John
alert(user.surname); // Smith


for looping in the objects we generally use the method Object.entries(obj)
it returns the array of the [key,value], same for the map it is the of 
operator which is there.

let user = new Map();
user.set("name", "John");
user.set("age", "30");

// Map iterates as [key, value] pairs, very convenient for destructuring
for (let [key, value] of user) {
  alert(`${key}:${value}`); // name:John, then age:30
}

The rest parameter is used for combining the rest items in the array or the object.

let [name1, name2, ...rest] = ["Julius", "Caesar", "Consul", "of the Roman Republic"];

// rest is array of items, starting from the 3rd one
alert(rest[0]); // Consul
alert(rest[1]); // of the Roman Republic
alert(rest.length); // 2

if the left side of part is smaller than the array elements then they all 
will be initialized to undefined. 

we can also put the default value in the destructuring..
// default values
let [name = "Guest", surname = "Anonymous"] = ["Julius"];

alert(name);    // Julius (from array)
alert(surname); // Anonymous (default used)

default values can be function calls or some advanced operations.
they are only evaluated if the value is not provided. 


In the object the name of the destructured and the name of the object key 
should be the same. Later we can rename them.
let {var1, var2} = {var1:…, var2:…}
let {width: w, height: h, title} = options;

let options = {
  title: "Menu"
};

let {width = 100, height = 200, title} = options;

we can also assign the default values here 
let {property:AnotherName=some defaultvalue} = obj;

alert(title);  // Menu
alert(width);  // 100
alert(height); // 200

rest operator works the same in here.
let {title, ...rest} = options;

when we destructure something then we have to do it on the declaration 
let {} or let [], we can not first define the variables and then assign them. because 
the js will treat the {} as the code block so, we should do it at the time of the 
declaration. 

let options = {
  size: {
    width: 100,
    height: 200
  },
  items: ["Cake", "Donut"],
  extra: true
};

// destructuring assignment split in multiple lines for clarity
let {
  size: { // put size here
    width,
    height
  },
  items: [item1, item2], // assign items here
  title = "Menu" // not present in the object (default value is used)
} = options;

sometimes in some usecases there can be too many parameters and we have to remember 
the order, here we can pass an object containing all the values and create a function 
which has all the specification about the default values and all.

function({
  incomingProperty: varName = defaultValue
  ...
})

here this destructuring assumes that the function will have an argument, if the 
empty object is passed then it will take the default values. When we do not pass the 
argument it will give an error as we can not destructure the undefined so, we have 
to pass the argument, or else we have to put the default value of the params as the 
empty object.

function({destructuring}={}) // like this



// smart function parameters
function showMenu({ title = "Menu", width = 100, height = 200 } = {}) {
  alert( `${title} ${width} ${height}` );
}

showMenu(); // Menu 100 200
Here if we do not give the default value of the function parameters
such as {title,width,height}={}, if we do not initialize it with the 
empty object then when we call the function with smart() then it will 
give the error as can not read the properties of undefined. 

so we have to define the default argument there. 

Because in the normal arguments it would have worked but here we are 
destructuring so we can not do destructuring of the undefined value. 


>>>>
If we define the function with only takes three arguments and even if we call 
that function with passing 4 or 5 arguments then also it will not give the error 
but it will in computation only consider the first three arguments.

this is called the rest parameter, the rest parameter actually means catch 
te arguments in the array 

for catching all the arguments 
function func(...args){
  for(let item of args) something computation...
}

In functions there is a special object called arguments which is an array like
which can be used for the arguments 

function f(){
  arguments.length
  arguments[0] etc.
}
f(a,b,c)

arrow function does not have the this as well as they do not have the arguments 
parameter, they take the argument from the outer function. 

this is called the rest parameter, it should be at the end of the arguments.also 
sometimes we want to do something which is completely reverse of it like...

function func(a,b,c){

}
let arr = [1,2,3]
func(...arr);

let arr = [3, 5, 1];
let arr2 = [8, 9, 15];
let merged = [0, ...arr, 2, ...arr2];
alert(merged); // 0,3,5,1,2,8,9,15 (0, then arr, then 2, then arr2)

NOTE 
Array.from(iterable) = converts the iterable into the array
it works both on the array like and iterables

while the spread syntax only works in the iterables. 

NOTE : The spread syntax works only with the iterables. and it can only do the shallow 
copy. 
for array [...arr]
for objects {...obj}

NOTE : Here the spread syntax only does the shallow copy it does not perform the 
deep copy so for performing the deep copy we have to manually go to the every 
deep level and then make use of the spread syntax.

NOTE 
arguments is the array like 
spread syntax only works in the iterables
