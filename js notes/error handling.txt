try {

  // code...

} catch (err) {

  // error handling

}

If we have the error in the scrpt then the script generally dies, but try catch
block helps us to have the functionalty to handle the errors. For the try catch to run 
the code and script must be runnable, it means it should be a valid javascript, 
if there is syntax error it won't work. 

try {
  setTimeout(function() {
    noSuchVariable; // script will die here
  }, 1000);
} catch (err) {
  alert( "won't work" );
}

If the exception happens inside the async calls then it won't be caught by the 
catch block. 

When the error occurs the javascript engines generates a error object and pass 
it to the catch block, for the general error the error object has these 
properties. name, message etc. 

if we do not want to catch the error then the catch block may emit the error 
catching and directly define the block.

try{

}catch{

}


we can also throw our own error, with the help of the throw operator, but 
and the throw can throw any type of error, it can use premitive value or 
anything else, but it is recommended to use the error object with name 
and the message properties. 

let error = new Error(message)
let error = new ReferenceError(message) //error.name = ReferenceError, 
error.message = message


we can also add one finally clause, which will execute always.  even if we 
have a return statement inside the try block the finally clause will always run. 

