setTimeout = allows to run the function once after certain timeout 
setInterval = runs the function repeatedly

methods are not the part of the javascript specification, but but in environments 
there lies a schedulers.


** setTimeout **
let timer = setTimeout(func | code,delay,[arg1],[arg2])

timer = it is the timer identifier basically the timer id
func = aa callback function 
delay in ms
arg1, arg2 arguments to the function


function sayHi(phrase, who) {
  alert( phrase + ', ' + who );
}
setTimeout(sayHi, 1000, "Hello", "John"); // Hello, John

we can cancel the timer by doing like,
clearTimeout(timer)


** setInterval **
let timerId = setInterval(func|code, [delay], [arg1], [arg2], ...)

for stoping the interval we have to do it like 
clearInterval(timerId)



nested setTimeout can be handy in most of the usecases. 

let delay = 5000;
let timerId = setTimeout(function request() {
  ...send request...
  if (request failed due to server overload) {
    // increase the interval to the next run
    delay *= 2;
  }
  timerId = setTimeout(request, delay);
}, delay);

we can modify this sort of the timers and add our custom functionalities. 

Nested setTimeout helps to set the delay between the calls more precisely than the 
setInterval



let i = 1;
setInterval(function() {
  func(i++);
}, 100);
Here the delay is less than the setTimeout, as the function running time and 
the timer of the next call are running on the same time.



let i = 1;
setTimeout(function run() {
  func(i++);
  setTimeout(run, 100);
}, 100);


In the setTimeout and setInterval the function will not be collected for the garbage 
, an internal reference for it is created, and saved in the scheduler. 

// the function stays in memory until the scheduler calls it
setTimeout(function() {...}, 100);

For setInterval the function stays in memory until clearInterval is called.

if the funtion is referencing the outer lexical environment then till the function 
lives the outer variables also lives, so it is recommended to clear the timeouts.


** Zero delay timeouts **
When we put no delay in the timeouts then the browser will run the function but 
after the script is fully executed. 