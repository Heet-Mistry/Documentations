Map is the key-value data type just like the object but the main difference 
here is that it can allow any type of keys here. In the object the type will 
be converted into the string so.

new Map() = creates the map 
map.set(key,value) = stores the key value
map.get(key) = returns the value and if not exist then undefined 
map.has(key) = returns true if key exis else false 
map.delete(key) = removes the value by the key 
map.size = gives the size 
map.clear() = clear the whole map 

general object converts the key into the string, but map keeps the type so it is
different in that way.

we should not use the map[key] for assigning or reading the values.

map can also make use of the object as the keys. which we can not use in the 
objects. if we use the object as the key in the onjects then what actully 
gets as the key is "[object Object]"

In the map NaN also can be the key, basically the map uses the === for comparison 
but it also handles the case of the NaN.

NOTE:
In the objects when we set the key like let obj = {anotherObj} then the 
anotherObj will be the string key, while when we set the key as the 
obj[anotherObj] then this key will be [object Object].


every map.set call returns the map itself so we can use the chaining 
map.set(x,a).set(a,c)

map.keys() = returns the iterables of the keys of the map
map.values() = returns the iterable of values
map.entries() = returns the iterable [key,value]

for let [k,v] of map.entries() it is the same as the for let[k,v] of mp
for let k of mp.keys()

map preserves the order in which the keys are inserted. 

map.forEach((value,key,mp)=> some computation)

for initializing the map we can make use of new Map() where we can pass 
the 2D array consisting of key and value pair 

let mp = new Map([[1,2],[3,4]])

if we have the object then we have to make use of the Object.entries(obj)


Also we can create the object with the help of the Object.fromEntries([[]])
it will create the object

 
when we have the map and then we want to convert it into the object then 
we can do it by doing like 

let obj = Object.fromEntries(map.entries());


** weakmap and weakset **
In javascript the value remains in the memory as long as it is reachable from the engine.

In the data structures like array, if we put an object into it, then the object will 
stay alive as long as it the array is alive. same case for the maps, where as long 
as the object is in the map, it will be there till the map is alive.

Weakmap 
- the keys must be objects not the primitives

let weakMap = new WeakMap();
let obj = {};
weakMap.set(obj, "ok"); // works fine (object key)
// can't use a string as the key
weakMap.set("test", "Whoops"); // Error, because "test" is not an object


let john = { name: "John" };
let weakMap = new WeakMap();
weakMap.set(john, "...");
john = null; // overwrite the reference
// john is removed from memory!

weakmap does not support the iteration methods
keys(),values(), entries()

only alowed methods 
- weakmap.set(key,value)
- weakmap.get(key)
- weakmap.delete(key)
- weakmap.has(key)


usecases 
- when we store the third prty data 
- when using caching


In weakset also it only supports the add, has, delete methods. 

