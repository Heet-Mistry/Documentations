*** Datatypes in javascript ***
Javascript allows to work with the premitives as they are the objects ofc they 
are not the objects but we can still call the methods on them.

there are 7 premitive types. string, number, bigint, symbol, boolean, null, undefined
and one non premitive type which is object, so in total there are 8 data types. 

Javascript creates a wrapper around the premitive types to work with them 
as the object, they are called the Number, String, Boolean, Bigint like this 
and typeof 0 is the number where the typeof Number(0) is the object.

NOTE : null and undefined has no methods.

> number in javascript 
- there are two types of numbers in javascript, one which is simply stored as 
  the 64 bit precision values or double precision floating point numbers.
- we can write the number like many ways 
  let num = 100000
  let num = 1_00_000
  let num = 1e9 
- we can also write the number as the binary octal or the hex form 
  let num = 0b10101
  let num = 0o34
  let num = 0xfff // in the hex numbers the case does not matter
- we can change the base of the number by the method num.toString(base) if we
  want to call the method directly on the premitive value then we have to call it 
  by wrapping them around the braces (1234).toString(2);

- always make use of the num.toFixed(n) to compare or perform operations on the 
  float numbers as the floats are stored in the binary format and may lead to the error
  in computation, 0.1+0.2 == 0.3 is false (Also the toFixed returns the string)

- there are two special values in javascript for the numbers 
  Infinity and -Infinity  and NaN

- we can not compare the NaN directly as this is the special value in the 
  javascript where NaN == NaN is not the same also because this special value 
  is not equal to itself also.

- Also the NaN is the falsy value for the comparison.

- isNaN(some var) ==> for checking if the value is NaN or not 

- isFinite(some var) ==> it first converts the argument in the number and then 
  checks if the NaN ancountered it will return false
  there are more strict version of this Number.isFinite and NUmber.isNaN which 
  first check the type and then returns the output

- Math.pow(x,n),Math.random() etc 

- parseInt and parseFloat also takes one another argument specifying the 
radix of the number as what this number is. 

NOTE = For checking the edge cases and the same value of the two variables 
make use of the method Object.is(a,b) it will also run for NaN and 0 and -0 are 
technically different in the computer. It is the strict comparison.

Any operation on the NaN will further be calculated as NaN. There is one 
exception in NaN that (NaN**0 = 1)

** BigInt **
The number data type can not express the data more than 2^53-1 and less than 
-(2^53-1), for that we have to make use of the bigint. 

for representing the value in the bigint we have to put the n at the end of the 
number it will consider it as the bigint. 

*** parseInt and the parseFloat ***
parseInt will return the number, it will check the data given and then it will 
convert the read data into the number until it can not find the numbers.


null in the javascript reresents the nothing, empty or the value unknown. where the 
undefined means that the value is not assigned. 

The symbol type is used to create the unique indentifier for the objects.

typeof null == object

here the typeof is the operator, not a function. 




>> More about the wrappers in javascript... 
Javascript is the weakly typed language, which means it allows the implicit type 
conversion when an operation involves two different types.
const foo = 42
const result = foo + "1"
then the result will be 421 so the foo is converted into the string so that 
the "1" can be appended onto it. 

all types can be checked except the null type as the typeof null gives the object. 

All premitive types except the null and undefined have their corresponding object 
wrappers, which allows some useful methods on the premitive types. so when some 
property is accessed onto the premitive value it is basically happening on the 
wrapper of the primitive types. 

conceptually the undefined represents the absence of the value while the null 
represent the absence of the object. 

+0 === -0 this is true 
but the difference comes when we do some computation on the +0 and -0

NaN is the only value in the javascript that is not equal to itself, we have 
to make use of isNaN() method for checking if it is NaN or not. 

The object wrappers are Number, Boolean, String etc but we may rarely find using 
them, so for converting one type to another we use the String(something) as the 
function, we do not use the
let something  = new String(some another datatype)
vecause here the something will be an object wrapper, if we check it using 
the typeof operator. 
