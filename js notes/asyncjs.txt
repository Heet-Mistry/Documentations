Javascript is single threaded, non-blocking, asynchronous concurrent 
programming language. Here when we say the word asynchronous then it does 
not mean that we are running the task parallely it is just we are switching the 
requests of the execution order.

Async = which means the actions are initiated but we finish them later

First the window methods have the precedance over the browser rendering
so. when we append dynamically some scripts in the document what happens 
is that, browser will start loading the script, but it will be an async action 
so when we will include the scripts, then browser will load, it and execute it 
when loaded. 



Asynchronous programming is the technique through which we can start potentially 
long running jobs and still be able to responsive to other events while the task 
runs rather than having to wait untill the task has finished.

for e.g. fetch() API

Let say we have an input box and iti takes a number and generates the prime numbers 
, and below the input box we have the text area where we can write the text now 
if we generate the large prime numbers and directly tap into the text area it will 
not be responsive as the sync js is still running the computation for calculating 
the prime numbers, here is the need of async js.

A event handler is just the another type of the callback. A callback is 
just the function passed to the another function, with the exception that the 
callback will be called at the appropriate time.

when we implement the async programs with the callbacks then we may sometimes 
be caught inside the callback hell. where there is too much callbacks and they 
are nested ones.

Asynchronous in other way means that it is initiated but it may finish later.


** callbacks **
The callbacks are nothing but for imposing the order, so let say first we want to 
load some script and then after the completion we will load the another. so it can be 
done with the callbacks. 

onload = runs the callbac after the script is loaded and executed

function loadScript(src, callback) {
  let script = document.createElement('script');
  script.src = src;
  script.onload = () => callback(script);
  document.head.append(script);
}


loadScript('/my/script.js', function(script) {
  loadScript('/my/script2.js', function(script) {
    loadScript('/my/script3.js', function(script) {
      // ...continue after all scripts are loaded
    });
  });
});

we can also handle the errors with some sort of the error handling. 


function loadScript(src, callback) {
  let script = document.createElement('script');
  script.src = src;
  script.onload = () => callback(null, script);
  script.onerror = () => callback(new Error(`Script load error for ${src}`));
  document.head.append(script);
}

loadScript('/my/script.js', function(error, script) {
  if (error) {
    // handle error
  } else {
    // script loaded successfully
  }
});

But when we have too many callbacks nested then it will become the pyramid of doom.
we can tear the code in fragments, but still it is not the good way. callback hell.

callbacks = it is just the function which is passed to the another function, and it 
will run on appropriate time. 















*** Promises ***
promises are the foundation of async programming. A promise is the object 
returned by the async function which represents the current state of the 
operation.

so what the promise does is that, it just ties the producing code with the 
consuming code. producing code is the code which takes some time for the completion.

The promise object represents the eventual completion of an asynchronous 
operation and its returning value.

the constructor syntax for the promise object is 
let promise = new Promise((resolve,reject)=>{
    // executor
})

when the promise is created the executor runs automatically, and produce the result 
eventually. when the executor obtains the result no matter soon or later, it 
will call the callbacks resolve or reject. 

promise object has these properties.
- state = pending, fullfilled or rejected.
- result = initially undefined, but eventually resolve(value) or reject(error)

generally the code inside the promise executor is blocking in nature or 
taking some time, so when the 
blocking happens, it will be async in nature. 


let promise = new Promise(function(resolve, reject) {
  // the function is executed automatically when the promise is constructed
  // after 1 second signal that the job is done with the result "done"
  setTimeout(() => resolve("done"), 1000);
});

resolve and reject changes the promise states.
A promise can be in three states.
1. pending = the promise is created 
2. fullfilled = the async function has succeded 
3. rejected = the async function has failed

the executor will only call one state change, which will be final, others will be 
ignored. 
resolve("done");
reject(new Error("…")); // ignored
setTimeout(() => resolve("…")); // ignored

In general the executor runs something async behaviour and calls the reject and 
resolve after some time. 

The properties state and the result are internal properties, we have to access them 
using the then catch and finally. 

promise.then(
  function(result) { /* handle a successful result */ },
  function(error) { /* handle an error */ }
);

promise.then(resolver function).catch(error handler)

there is also one another methods for the promises which is finally, the function 
inside the finally will always run. finally handler will not have any argument 
to handle. finally is generally used for the cleanup. finally will not return 
anything, if it returns then the value will be ignored. 

when the finally handler throws an error, then the execution goes to the 
nearest error handler. if the finally throws an error then, it will be caught 
by the nearest error handler, if catch then there, else in the try catch. 

function loadScript(src, callback) {
  let script = document.createElement('script');
  script.src = src;
  script.onload = () => callback(null, script);
  script.onerror = () => callback(new Error(`Script load error for ${src}`));
  document.head.append(script);
}

when we rewrite the code using the promises then we will not require the callbacks.

function loadScript(src) {
  return new Promise(function(resolve, reject) {
    let script = document.createElement('script');
    script.src = src;
    script.onload = () => resolve(script);
    script.onerror = () => reject(new Error(`Script load error for ${src}`));
    document.head.append(script);
  });
}

let promise = loadScript("https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.js");

promise.then(
  script => alert(`${script.src} is loaded!`),
  error => alert(`Error: ${error.message}`)
);

promise.then(script => alert('Another handler...'));


** promise chaining **
when we have more than one async tasks to implement, one after the other then 
we can make use of the promise chaining. 

then method also returns the promise which is resolved by the return value. if we want 
the chaining then we have to chain the values, we should not add seperate thens to the 
promise.

promise.then()
promise.then() // will not work this way 

we have to do it like 
promise.then().then()

here we can also work the way by returnning the values, but we should actually do it 
by doing, returning the promises. 

for being precise the handler should not always return exactly a promise, but rather 
a thenable object. an arbitary object that has an method .then. 

when the error happens then the control goes to the nearest error handler. 

If we throw inside .catch, then the control goes to the next closest error 
handler. And if we handle the error and finish normally, then it continues to 
the next closest successful .then handler.

we can also add the unhandledrejection event listener to the window specified by 
the HTML standard. 

The catch block will only handle the synchronous errors, but if we have the 
error in the setTimeout then it is not the error of the exeutor function, so 
it will not be caught in the catch block. 

new Promise(function(resolve, reject) {
  setTimeout(() => {
    throw new Error("Whoops!");
  }, 1000);
}).catch(alert);

But here the error is generated not while the executor is running, 
but later. So the promise can’t handle it.

Promisification = it is the process of converting the funcition which accepts the 
callback into the function which is handled by the promises. 

for the promisification , we will have to declare a callback which require 
two aguments error and the result, for the case of the error handling and all.

promisification is the approach in which we call the callback only once, 
not many times.

** Promise API **
1. Promise.all(iterable)
it takes an iterable and returns a new promise. the new promise will resolve 
when all listed promises are resolved. and the result becomes array of resolve 
values. 

Promise.all([
  new Promise(resolve => setTimeout(() => resolve(1), 3000)), // 1
  new Promise(resolve => setTimeout(() => resolve(2), 2000)), // 2
  new Promise(resolve => setTimeout(() => resolve(3), 1000))  // 3
]).then(alert); // 1,2,3 when promises are ready: each promise contributes an array member


let urls = [
  'https://api.github.com/users/iliakan',
  'https://api.github.com/users/remy',
  'https://api.github.com/users/jeresig'
];

// map every url to the promise of the fetch
let requests = urls.map(url => fetch(url));

// Promise.all waits until all jobs are resolved
Promise.all(requests)
  .then(responses => responses.forEach(
    response => alert(`${response.url}: ${response.status}`)
  ));

if any one of the promise rejects then the promise returned by the promise.all 
immediately rejects with that error.

Promise.all([
  new Promise((resolve, reject) => setTimeout(() => resolve(1), 1000)),
  new Promise((resolve, reject) => setTimeout(() => reject(new Error("Whoops!")), 2000)),
  new Promise((resolve, reject) => setTimeout(() => resolve(3), 3000))
]).catch(alert); // Error: Whoops!

we can also pass the primitive values, in the promise.all.
it will return them as it is.


2. Promise.allSettled()
this waits for the promises to be settled, no matter if they have the error or not 
the result of the promise.allsettled  will be the array of objects which 
contains 

{status:"fullfilled",value:result} for the successful
{status:"rejected",value:error} for the error


3. Promise.race
similar to the promise.all, but it waits only for the first settled promise and
gives its results. 

4. Promise.any 
similar to the promise.race but it only waits for the first fullfilled promise.
if all the promise objects are rejected then the returned promise will be 
rejected with the AggregateError a special error object. 

Promise.any([
  new Promise((resolve, reject) => setTimeout(() => reject(new Error("Ouch!")), 1000)),
  new Promise((resolve, reject) => setTimeout(() => reject(new Error("Error!")), 2000))
]).catch(error => {
  console.log(error.constructor.name); // AggregateError
  console.log(error.errors[0]); // Error: Ouch!
  console.log(error.errors[1]); // Error: Error!
});

Promise.resolve(value) = it creates the resolved promise with the given value
it is rarely used when we want some code snippet to always return the promise. 

if we return the promise chain, then what happens is that, the last return statement 
of the chain will be the resolving value of the promise chain returned from 
tat function.


let cache = new Map();

function loadCached(url) {
  if (cache.has(url)) {
    return Promise.resolve(cache.get(url)); // (*)
  }
    return fetch(url)
        .then((res) => res.json())
        .then((res)=> res)
}

loadCached("https://jsonplaceholder.typicode.com/users")
    .then((res)=>console.log(res)) // here the res will be the last return statement 
                                   // of the .then 

Promise.reject(error) = this returns the rejected promise with the given error
message


promise handlers such as .then, .catch, .finally are always async. Even if the 
promise is resolved immediately, the code below the .then and all execute before it.

PromiseJobs or Microtask Queue 
execution of the microtasks are done on the main thread, but when the main stack 
is empty. 

An unhandled rejection occurs when a promise error is not handled at the end 
of the microtask queue. 

let promise = Promise.reject(new Error("Promise Failed!"));
promise.catch(err => alert('caught'));
// doesn't run: error handled
window.addEventListener('unhandledrejection', event => alert(event.reason));


There is no catch 
let promise = Promise.reject(new Error("Promise Failed!"));
// Promise Failed!
window.addEventListener('unhandledrejection', event => alert(event.reason));


let promise = Promise.reject(new Error("Promise Failed!"));
setTimeout(() => promise.catch(err => alert('caught')), 1000);
// Error: Promise Failed!
window.addEventListener('unhandledrejection', event => alert(event.reason));


But now we understand that unhandledrejection is generated when the microtask 
queue is complete: the engine examines promises and, if any of them is in the 
“rejected” state, then the event triggers.


** async and await ***
async function always returns a promise. the return value of the async 
function will be the resolved value of the promise returned by the async function. 
we can also explicitely return a promise with the resolved value, it will be the 
same. 

async function f() {
  return 1;
}
f().then(alert); // 1

async function f() {
  return Promise.resolve(1);
}
f().then(alert); // 1

await only works inside the async function. the await makes the js to wait until 
the promise is resolved. the return value of the await expression is the promise 
fullfilled value. await will also accept thenables, if we give the primitive 
value in the await, await will wrap the value in the promise with the value 
as the promise resolved. for error handling we have to make use of the try and 
the catch block for the errors. 

if we do not have the try and catch block, then the promise generated by the call 
of the async function f() becomes rejected. we can append the catch to handle it.

async function f() {
  let response = await fetch('http://no-such-url');
}
// f() becomes a rejected promise
f().catch(alert); // TypeError: failed to fetch // (*)

In the case of an error, it propagates as usual, from the failed promise to
Promise.all, and then becomes an exception that we can catch using try..catch 
around the call.

macrotask queue = setTimeout, scripts and all
- rendering never happens while the engine executes the task, even if it takes 
  more time, the changes are painted to the DOM after the task completes
- if a task takes too long, the browser can not do other things, so after 
  some time it alerts the page unresponsive. 






>> callback functions 
callback functions are like after something do something.

>> we can implement the callbacks with the help of the promises in a better 
readable way and without teh callback hell.

>> even in the promises we can have the large linear structure there, we can 
still improvise it by using the async and await functions.

async and await ===>
async function always returns a promise. if we have the return value inside the 
async function then the promise returned from the async function will be fullfilled 
by that return value.

asynccall().then((message)=>console.log(message)); ===> here the message is the 
value with which the promise is full filled.

async and await are used for avoiding the promise chains. those chains can be 
represented in a better way with the async and await.

for the catch statement in the async await function we have to make use of try 
and catch block.


*** await ***

[rv] = await expression;
// here the expression can be the promise or any value to be wait for 

[rv] = it is the fullfilled value of the promise and if not the promise then 
it returns the direct value.

also in the await if the promise is rejected then the rejected value will be 
thrown and it will be caught by the catch block.


NOTE : Promise.all([array of promises]).then((arr)=> here the arr is 
    the array of resolved values
).catch((rejection)=> here the rejection is the rejection value of any one of the promise)