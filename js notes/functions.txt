*** Funtions in javascript ***
1. function declaration 
   function funcname(args){func body}
   function funcname(arg1,arg2=something){} ==> function with the default body

if we require the parameter inside the function declaration and we do not 
pass it in the function calling then we can explicitely check it for the 
undefined because when we do not pass the parameters it will be taken as the 
undefined.

return; ==> void return
when we do not have the return type of the function then it will return the 
undefined there.
the values passed into the function as parameters are copied to its local 
variables.


2. function expression 
let somevar = function(params){
  function body
}

In the javascript any function is the value itself when we use function 
declaration or the function expressions it does not matter it will be the 
same thing just the difference is in the hoisting. Also at the end of the 
function expression we require the semicolon because it is the part of the 
statement, when we use the function expression then we have to put the 
semicolon at the end.

callbacks function in the javascript is nothing but for imposing some sort of the 
order in the execution as let say if something happens we should do this and 
if not we should do something else.

The main difference between the function expression and the function declaration 
is that the function expression is created when the code flow reaches there 
and also it is useful after that only. But in the case of the function 
declaration when the javascript first executes the script at first it will check 
for the global declaration of the functions and then create it. so this 
functions will be available every time. Function declaration in the javascript 
is block scoped.



** Function NFE **
functions in the js is the value, and every value has the type in the javacript 
so the functions are the type of the objects 

we can access some property of the functions in the javascript, such as every 
function has the built in property name, we can access it by func.name. 

let sayHi = function() {
  alert("Hi");
};
alert(sayHi.name); // sayHi (there's a name!)

the name property is the contextual name, if the function does not provide the 
name then the name will be taken from the contextual name. 

there are also some cases in which the name property can not be initialized 
such as below.

let arr = [function() {}];
alert( arr[0].name ); // <empty string>
// the engine has no way to set up the right name, so there is none

the length property gives the length of the parameters.

function f1(a) {}
function f2(a, b) {}
function many(a, b, ...more) {}
alert(f1.length); // 1
alert(f2.length); // 2
alert(many.length); // 2

NOTE : In the length property the rest parameter is not counted. 

we can add some of our own properties inside the function objects. 

we can also replace the closures with the function custom properties.

function makeCounter() {
  // instead of:
  // let count = 0

  function counter() {
    return counter.count++;
  };

  counter.count = 0;

  return counter;
}
let counter = makeCounter();
alert( counter() ); // 0
alert( counter() ); // 1

here the counter is in the function scope and its property, it is not stored in the 
lexical environment, so the outer code can access it, but in the case of the let 
declaration it will not. 


Named function expression 
they are the functions which have the name.

let sayHi = function(who) {
  alert(`Hello, ${who}`);
}; // name is sayHi

let sayHi = function func(who) {
  alert(`Hello, ${who}`);
}; // this is the NFE

TWO THINGS 
- it allows the function to reference itself internally 
- it is not visible outside the function


let sayHi = function func(who) {
  if (who) {
    alert(`Hello, ${who}`);
  } else {
    func("Guest"); // use func to re-call itself
  }
};

sayHi(); // Hello, Guest

// But this won't work:
func(); // Error, func is not defined (not visible outside of the function)


why should not we use directly the function itself to call it immediately.
actually in most of the cases we can. 

the problem is that if the function may assigned to another variable then 
it will give the error when the raw variable is destroyed. 

let sayHi = function(who) {
  if (who) {
    alert(`Hello, ${who}`);
  } else {
    sayHi("Guest"); // Error: sayHi is not a function
  }
};

let welcome = sayHi;
sayHi = null;

welcome(); // Error, the nested sayHi call doesn't work any more!

the above thing happens because the function takes the sayHi from the 
outer lexical scope, there is no local sayHi so the outer variable is used and when
the outer variable is used then the sayHi at that time is the null so, we can not 
call it. 

let sayHi = function func(who) {
  if (who) {
    alert(`Hello, ${who}`);
  } else {
    func("Guest"); // Now all fine
  }
};

let welcome = sayHi;
sayHi = null;

welcome(); // Hello, Guest (nested call works)

here the func name is the local, and it is not taken from the outer lexical 
environment, the specification is created in the way that it always reference the 
current function. 

this is only applicable for the function expression not for the 
function declaration. 

** new Function syntax **
we can also create the function with the function declaration syntax 
by doing like 

let func = new Function([arg1,arg2...,argn],functionBody)
here the arguments and the function body should be in the string format

let sum = new Function('a', 'b', 'return a + b');
alert( sum(1, 2) ); // 3

let sayHi = new Function('alert("Hello")');
sayHi(); // Hello

here the main usecase is that, in the simple function declaration we have to 
create the function before, and here we can create the function at the run time 
from the string.

USECASE = when the code is recieved from the server and then we have to dynamically 
create the function for that. 

here the main drawbac is that when the function is created with the new function
syntax then, in the special variable [[Environment]] the reference will be to the 
global lexical environment not to the outer one. so we can not 
form the closures with the new function syntax. 

Minifier = removes extra spaces, extra comments and renames the local variables into 
smaller names 

because the new function syntax uses the string to convert the function body, 
it will not find the reference to the renamed variables if referenced, so it 
is good thing that new function syntax is only allows the outer scope. 




3. IIFE = Immediately invoked function expression 
(function(){
  some computations;
})(); // this thing will run automatically when it is reached



*** Arrow functions ***
Same as the function expressions the arrow function will not be hoisted in js.
Arrow functions should not be used to declare the methods in the object 
when we use the this otherwise it is fine.We have to use the function expression 
then.

let a = (args)=>{function body}
let a = ()=>something we want to return

the forEach runs the function with the this = undefined by default

arrow functions do not have this, so they can not be used as the construtors, they 
can not be used with the new syntax. 

Arrow functions do not create the binding, as the normal functions, in the arrow function 
there is no this so, the lookup for the this will be same way as the search of the 
regular variables, from the outer lexical environment. 

arrow function does not have arguments variable. 


** Decorators and forwarding call/apply **


1. Transparent caching
let say we have a function which is called slow(x) and it is is very CPU heavy, 
we can make use of the caching to reduce the time and computations, but rather then 
altering the slow function we should create a wrapper around the target function for 
the caching behaviour.

function cachingDecorator(func){
  let cache = new Map();

  // the wrapper
  return function(x){
    if(cache.has(x)) return cache.get(x);
    let result = func(x)
    cache.set(x,result)
    return result;
  }
}

slow = cachingDecorator(slow)
so the decorator returns the cached wrapper around the main function. 



2. Using func.call for the context 
we can not use the direct caching wthout the context in the object methods 

// we'll make worker.slow caching
let worker = {
  someMethod() {
    return 1;
  },

  slow(x) {
    // scary CPU-heavy task here
    alert("Called with " + x);
    return x * this.someMethod(); // (*)
  }
};

// same code as before
function cachingDecorator(func) {
  let cache = new Map();
  return function(x) {
    if (cache.has(x)) {
      return cache.get(x);
    }
    let result = func(x); // (**)
    cache.set(x, result);
    return result;
  };
}

alert( worker.slow(1) ); // the original method works
worker.slow = cachingDecorator(worker.slow); // now make it caching
alert( worker.slow(2) ); // Whoops! Error: Cannot read property 'someMethod' of undefined

for solving this problem we can make use of the function.call method which helps 
to specify the context, while running the function.

func.call(context,arg1,arg2,arg3..)


function sayHi() {
  alert(this.name);
}
let user = { name: "John" };
let admin = { name: "Admin" };
// use call to pass different objects as "this"
sayHi.call( user ); // John
sayHi.call( admin ); // Admin


function say(phrase) {
  alert(this.name + ': ' + phrase);
}
let user = { name: "John" };
// user becomes this, and "Hello" becomes the first argument
say.call( user, "Hello" ); // John: Hello



let worker = {
  someMethod() {
    return 1;
  },

  slow(x) {
    alert("Called with " + x);
    return x * this.someMethod(); // (*)
  }
};

function cachingDecorator(func) {
  let cache = new Map();
  return function(x) {
    if (cache.has(x)) {
      return cache.get(x);
    }
    let result = func.call(this, x); // "this" is passed correctly now
    cache.set(x, result);
    return result;
  };
}

here the this will be the worker because the this of the wrapper function 
is evaluated to be the worker and we are passing that. 

worker.slow = cachingDecorator(worker.slow); // now make it caching

alert( worker.slow(2) ); // works
alert( worker.slow(2) ); // works, doesn't call the original (cached)



3. Going multi argument
we can make the decorator more universal with any number of aguments

there can be many ways to remember the permutations of the arguments to cache 
into the map, like we can make use of the nested map, but it will take more memory and 
there will be too much nesting, or we can create our own map like data structure.

or we can join two values into one. basically our own hash function. 

let worker = {
  slow(min, max) {
    alert(`Called with ${min},${max}`);
    return min + max;
  }
};

function cachingDecorator(func, hash) {
  let cache = new Map();
  return function() {
    let key = hash(arguments); // (*)
    if (cache.has(key)) {
      return cache.get(key);
    }

    let result = func.call(this, ...arguments); // (**)
    cache.set(key, result);
    return result;
  };
}

function hash(args) {
  return args[0] + ',' + args[1];
}

worker.slow = cachingDecorator(worker.slow, hash);
alert( worker.slow(3, 5) ); // works
alert( "Again " + worker.slow(3, 5) ); // same (cached)


there is also an another method for the func.apply which does the same thing but 
the main difference here is that the func.apply expects the args as the 
array of the arguments while the call will expect the destructured arguments. 

passing all arguments along with the context to another function is called 
the call forwarding. 

here the arguments parameter can be both array or array like. so for the hash function 
let say we have too many keys then we have to join them but join method is only there 
in teh array so we have to make use of the method borrowing.

[].join.call(arguments)

here we have given the context as the arguments, this is because of the specification 
of the join method, if no glue is there then it will put , by default. 

So, technically it takes this and joins this[0], this[1] …etc together. 
It’s intentionally written in a way that allows any array-like this 
(not a coincidence, many methods follow this practice). That’s why it also works 
with this=arguments.


** function binding **
When we pass some function to some other function, then there is always a problem 
lies of loosing the this. for an example when the method is passed somewhere else 
from the object then the this will be lost. 

in the setTimeout the this becomes the window object. in the browser.

simplest solution 

1. wrap the function 
let user = {
  firstName: "John",
  sayHi() {
    alert(`Hello, ${this.firstName}!`);
  }
};

setTimeout(function() {
  user.sayHi(); // Hello, John!
}, 1000);


here we want that the settimeout runs in the non updated context, when updated 
it should still run in the previous context, but if before the 1000ms the object 
changes then the user.sayHi will run on the latest updated object.


2. bind 
functions have there own inbuilt methods for providing the this to bind it with the 
function context. 

let boundedfunc = func.bind(context)
the boundedfunc is the function like exotic object which is callable and 
it has the this as the context. 

let user = {
  firstName: "John"
};
function func() {
  alert(this.firstName);
}
let funcUser = func.bind(user);
funcUser(); // John



let user = {
  firstName: "John",
  sayHi() {
    alert(`Hello, ${this.firstName}!`);
  }
};

here the context is the same as the non updated object
let sayHi = user.sayHi.bind(user); // (*)

// can run it without an object
sayHi(); // Hello, John!

setTimeout(sayHi, 1000); // Hello, John!

// even if the value of user changes within 1 second
// sayHi uses the pre-bound value which is reference to the old user object
user = {
  sayHi() { alert("Another user in setTimeout!"); }
};



** partial functions **
we can not only bind the this but we can also bind the arguments 

let bound = func.bind(context, [arg1], [arg2], ...);
if the func takes three arguments and in the bind we give only two then 
the first two will be initialized to them. 

function mul(a, b) {
  return a * b;
}

let double = mul.bind(null, 2);

alert( double(3) ); // = mul(2, 3) = 6
alert( double(4) ); // = mul(2, 4) = 8
alert( double(5) ); // = mul(2, 5) = 10

the use of the partial function is that when we have an universal function 
and when we want to make some more common less universal partial function,
here we have the mul from that we can create the double tripple etc from that. 

For instance, we have a function send(from, to, text). Then, inside a user object 
we may want to use a partial variant of it: sendTo(to, text) that sends from the 
current user.



** going partial without context **




