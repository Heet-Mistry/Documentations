>> Extracting state logic into reducer 

Reducers are basically helpful for decrease the complexity of the state logic
and its updates. when the complexity of the component features grow we have to 
handle the state updates neatly, we can fetch this state logic into a reducer 
function. 

In the reducer function we will have a state logic variables and some dispatch 
action to update the state in the UI. so dispatch basically means that we are not 
directly setting the state rather we are just directing an action that what we 
are doing and the setting logic will stay somewhere else.

dispatch({some details about what action we have to pass})
the object passed to the dispatch is called the action. 

step 1 ==> First we will convert all the setting logics into the dispatch action 
step 2 ==> we have to write the reducer function which takes the current state 
           an action and it will return a next updated state. 

Always make use of the switch statemenets in the reducer it is a recomended practice. 


Because the reducer function takes state (tasks) as an argument,
 you can declare it outside of your component. This decreases the 
 indentation level and can make your code easier to read.

function tasksReducer(tasks, action) {
  switch (action.type) {
    case 'added': {
      return [
        ...tasks,
        {
          id: action.id,
          text: action.text,
          done: false,
        },
      ];
    }
    case 'changed': {
      return tasks.map((t) => {
        if (t.id === action.task.id) {
          return action.task;
        } else {
          return t;
        }
      });
    }
    case 'deleted': {
      return tasks.filter((t) => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}



import {useReducer} from 'react';
const [tasks, setTasks] = useState(initialTasks); // this can be replaced by 
const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);

useReducer takes two argument 
reducer function 
initial state value

and it returns 
a nest stateful value 
and a dispatch function which will change the state accordingly

some downsides of useReducer
> CODE SIZE GETS HIGH 
> READABILITY ISSUE, AS THE USESTATE IS  MORE READABLE 
> DEBUGGING IS EASY IN REDUCER 
> TESTING IS EASY IN REDUCER AS THE REDUCER FUNCTION IS THE PURE FUNCTION 

NOTE 
REDUCERS MUST BE PURE FUNCTION SAME AS THE STATE UPDATER FUNCTIONS THEY SHOULD NOT 
PERFORM ANY SIDE EFFECTS


## scaling up with the reducer and the context 
reducer is used to keep the event handler logic to concise and the context helps to 
pass the data down deeply. 

generally we put the reducer at the top of the components and then we send them as 
the props to the child components, but it can be cumbersome when there is situations 
like prop drilling. 

so we can create two context stateContext and the dispatchContext and it will 
be passed down in the tree with the context provider and we can access them in the tree.

A function is called custom hook if its name starts with the use and the custom 
hooks let us to use other hooks inside it. 


import { createContext, useReducer } from 'react';

export const TasksContext = createContext(null);
export const TasksDispatchContext = createContext(null);

export function TasksProvider({ children }) {
  const [tasks, dispatch] = useReducer(
    tasksReducer,
    initialTasks
  );

  return (
    <TasksContext.Provider value={tasks}>
      <TasksDispatchContext.Provider value={dispatch}>
        {children}
      </TasksDispatchContext.Provider>
    </TasksContext.Provider>
  );
}

function tasksReducer(tasks, action) {
  switch (action.type) {
    case 'added': {
      return [...tasks, {
        id: action.id,
        text: action.text,
        done: false
      }];
    }
    case 'changed': {
      return tasks.map(t => {
        if (t.id === action.task.id) {
          return action.task;
        } else {
          return t;
        }
      });
    }
    case 'deleted': {
      return tasks.filter(t => t.id !== action.id);
    }
    default: {
      throw Error('Unknown action: ' + action.type);
    }
  }
}

const initialTasks = [
  { id: 0, text: 'Philosopherâ€™s Path', done: true },
  { id: 1, text: 'Visit the temple', done: false },
  { id: 2, text: 'Drink matcha', done: false }
];



## Quick note
function reducer(state,action){
  switch(action.type){
    return the new state based on the state
  }
}

function useReducer(reducer,initialState){

  const [state,useState] = useState(initialState)
  function dispatch(action){
    const nextState = reducer(state,action)
    setState(nextState);
  }
  return [state,dispatch]
}

